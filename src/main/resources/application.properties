
spring.datasource.url = jdbc:postgresql://localhost:5432/books
spring.datasource.username = postgres
spring.datasource.password = root



spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
			
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.format_sql=true

server.port=8080

#multipart configuration
#enabling multipart uploads
spring.servlet.multipart.enabled=true
#max file size
spring.servlet.multipart.max-file-size=300MB
#thresold after whicj file are written to disk
spring.servlet.multipart.file-size-threshold=1KB

#Oauth2 configure
spring.security.oauth2.client.registration.google.client-id= 308383562708-lfhpggtkusr0o4nj0svvndtv350tjdvd.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret= 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

#paytm
# paytm.payment.sandbox.merchantId:
# paytm.payment.sandbox.merchantKey: 
# paytm.payment.sandbox.channelId:WEB
# paytm.payment.sandbox.industryTypeId:Retail
# paytm.payment.sandbox.website:WEBSTAGING
# paytm.payment.sandbox.paytmUrl:https://securegw-stage.paytm.in/order/process
# paytm.payment.sandbox.callbackUrl:http://localhost:8080/pgresponse
# paytm.payment.sandbox.details.MID: ${paytm.payment.sandbox.merchantId}
# paytm.payment.sandbox.details.CHANNEL_ID: ${paytm.payment.sandbox.channelId}
# paytm.payment.sandbox.details.INDUSTRY_TYPE_ID: ${paytm.payment.sandbox.industryTypeId}
# paytm.payment.sandbox.details.WEBSITE: ${paytm.payment.sandbox.website}
# paytm.payment.sandbox.details.CALLBACK_URL: ${paytm.payment.sandbox.callbackUrl}
# paytm.mobile = 
# paytm.email = 